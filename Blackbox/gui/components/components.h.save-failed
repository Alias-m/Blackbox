#ifndef BLACKBOX_COMPONENT_H
#define BLACKBOX_COMPONENT_H
#include <vector>
#include "Graphics.h"
#include "layouts/Layout.h"
#include <SDL2/SDL_image.h>
#include "../../utils/Bounds.h"
#include "../../utils/Observable.h"
#include "../events/factories/EventFactory.h"
#include "../listeners/ListenerFactory.h"

class Component;

class Component : public Observer
{
    friend class Graphics;
    friend class GridLayout;
    friend class Frame;
    protected:
        Layout* layout;
        std::vector<Component*> components;
        Bounds bounds;
        Frame* container;
        Component* parent;
        EventFactory* events;
        SDL_Texture *texture;
    private:

    public:
        inline Component(const int x = 0, const int y = 0, const int w = 0, const int h = 0): layout(NULL), bounds(x, y, w, h), container(NULL) {}
        virtual void addComponent(Component* c);
        virtual void close();
        inline virtual void setBounds(int x, int y, int w, int h) {bounds.setX(x); bounds.setY(y); bounds.setWidth(w); bounds.setHeight(h);}
        void setEventFactory(EventFactory* e);
        void addEvent(Event* e);
        void addEvent(internal_event::InternalEvent* e);
        virtual const int getID() const = 0;
        virtual void paintComponent(Graphics* g) = 0;
        void paint(Graphics* g);
        inline Frame* getContainer(){return container ? container : parent->getContainer();}
        inline const int getXToFrame() {return (parent ? parent->getXToFrame() : 0) + bounds.getX();}
        inline const int getYToFrame() {return (parent ? parent->getYToFrame() : 0) + bounds.getY();}
        virtual void link();
        bool match(const int x, const int y);
        Component* find(int x, int y) const;
        Bounds getShowableBounds();
};
#endif // BLACKBOX_COMPONENT_H
